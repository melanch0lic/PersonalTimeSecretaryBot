import asyncio
from msilib.schema import Error

import sqlite3
import time
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text

import requests
import speech_recognition as sr
import subprocess
from datetime import datetime
import os
import config
import sqlite3
import re

from aiogram.utils.exceptions import (
    MessageCantBeDeleted, MessageToDeleteNotFound)


my_token = config.API_TOKEN

bot = Bot(token=my_token)
dp = Dispatcher(bot)
logfile = str(datetime.today()) + '.log'


def audio_to_text(dest_name: str):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞—É–¥–∏–æ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ ".wav" –≤ —Ç–µ–∫—Å—Ç
    r = sr.Recognizer()  # —Ç–∞–∫–æ–µ –≤–æ–æ–±—â–µ –Ω–∞–¥–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ç—å?
    # —Ç—É—Ç –º—ã —á–∏—Ç–∞–µ–º –Ω–∞—à .wav —Ñ–∞–π–ª
    message = sr.AudioFile(dest_name)
    with message as source:
        audio = r.record(source)
    # –∏—Å–ø–æ–ª—å–∑—É—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∂–µ —Ç—É—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    result = r.recognize_google(audio, language="ru_RU")
    return result


def insertEventToSql(event_name, event_datetime, user_id):
    try:
        conn = sqlite3.connect("data.db")
        cursor = conn.cursor()
        check_event = f"SELECT event_name FROM EVENTS WHERE EXISTS(SELECT event_id FROM EVENTS WHERE event_name='{event_name}') AND event_name='{event_name}'"
        resp = cursor.execute(check_event).fetchall()
        if not resp:
            sqlite_insert_query = f"INSERT INTO EVENTS (event_id, event_name, event_datetime, user_id) VALUES (null, '{event_name}', '{event_datetime}', '{user_id}')"
            cursor.execute(sqlite_insert_query)
            conn.commit()
            print('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ ‚Äã‚Äã–≤ —Ç–∞–±–ª–∏—Ü—É EVENTS', cursor.rowcount)
        else:
            print('–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º —Å–æ–±—ã—Ç–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        cursor.close()
    except sqlite3.Error as error:
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑—É', error)
    finally:
        if conn:
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")


def getAllEvents(user_id):
    try:
        conn = sqlite3.connect("data.db")
        cursor = conn.cursor()

        sqlite_insert_query = f"SELECT * from EVENTS WHERE user_id='{user_id}'"
        resp = cursor.execute(sqlite_insert_query).fetchall()
        conn.commit()
        print("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã EVENTS –ø–æ–ª—É—á–µ–Ω—ã")
        cursor.close()
        return resp
    except sqlite3.Error as error:
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –±–∞–∑—ã', error)
    finally:
        if conn:
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")


def deleteEvent(event_id):
    try:
        conn = sqlite3.connect("data.db")
        cursor = conn.cursor()

        sqlite_insert_query = f"DELETE from EVENTS WHERE event_id={event_id}"
        cursor.execute(sqlite_insert_query)
        conn.commit()
        print("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã EVENTS –ø–æ–ª—É—á–µ–Ω—ã")
        cursor.close()
    except sqlite3.Error as error:
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –±–∞–∑—ã', error)
    finally:
        if conn:
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")


async def on_startup(_):
    print('–ë–æ—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω')
    try:
        conn = sqlite3.connect("data.db")
        cursor = conn.cursor()

        print(datetime.now())
        cursor.execute(
            ''' SELECT count(name) FROM sqlite_master WHERE type='table' AND name='EVENTS' ''')
        if cursor.fetchone()[0] == 1:
            print('Table exists!')
        else:
            cursor.execute(
                "CREATE TABLE EVENTS(event_id INTEGER PRIMARY KEY, event_name TEXT, event_datetime TEXT, user_id TEXT)")

        print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")

    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
    finally:
        if conn:
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")


@dp.message_handler(commands=['start', 'help'])
async def command_start(message: types.Message):
    try:
        start_buttons = ['‚úç–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫', 'üëÄ–û –±–æ—Ç–µ', ]
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*start_buttons)
        await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è, –º–µ—Å—Ç–æ —Å–æ–±—ã—Ç–∏—è(–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å) –∏–ª–∏ –∂–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫–æ–≥–æ –∂–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.', reply_markup=keyboard)
        await message.delete()

    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É: \nhttps://t.me/personal_secretarybot ')


@dp.message_handler(Text(equals='‚úç–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫'))
async def get_list(message: types.Message):
    event_list = getAllEvents(message.from_user.id)
    if event_list:
        for i, value in enumerate(event_list):
            buttons = [types.InlineKeyboardButton(
                text='‚úÖ', callback_data=f'accept|{value[0]}|{value[1]}')]
            inline = types.InlineKeyboardMarkup(row_width=1)
            inline.add(*buttons)
            msg = await bot.send_message(message.from_user.id, f'{i+1}# {value[1]} {value[2]}', reply_markup=inline)
    else:
        await bot.send_message(message.from_user.id, '–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç.')
    print(event_list)


@dp.callback_query_handler(Text(startswith='accept'))
async def delete_event(query: types.CallbackQuery):
    await bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
    info = query.data.split('|')
    await bot.send_message(query.from_user.id, f'–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - "{info[2]}"')
    deleteEvent(info[1])


@dp.message_handler(Text(equals='üëÄ–û –±–æ—Ç–µ'))
async def about_bot(message: types.Message):
    await bot.send_message(message.from_user.id, '–≠—Ç–æ—Ç –±–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã \n–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ —Å—É–¥–∏—Ç—å —Å—Ç—Ä–æ–≥–æ –ª–µ–Ω–∏–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ ü•∫')


@dp.message_handler(content_types=['voice'])
async def get_audio_messages(message):
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—É—Ö—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        print("Started recognition...")
        # –ù–∏–∂–µ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—á–ª–µ–Ω–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞, –¥–∞ –∏ –≤–æ–æ–±—â–µ –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ —Å –º–µ—Å—Å–∞–≥–∏
        file_info = await bot.get_file(message.voice.file_id)
        path = file_info.file_path
        print(path)  # –í–æ—Ç —Ç—É—Ç-—Ç–æ –∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: voice/file_2.oga)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –≤ –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: file_2.oga)
        fname = os.path.basename(path)
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—Å–ª–∞–Ω–Ω—É—é –≥–æ–ª–æ—Å–≤—É—Ö—É (–ê–≥–∞, –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∞–π–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –∏ —Å–ª—É—à–∞—Ç—å –≤—Å–µ, —á—Ç–æ —Ç—ã —Ç–∞–º –≥–æ–≤–æ—Ä–∏—à—å. –ê –ø—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç–∞–∫—É—é –±—è–∫—É –ø–æ–¥—Å–µ–ª—è—Ç –≤ –æ–≥—Ä–æ–º–Ω—ã–π —á–∞—Ç –∏ –æ–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è [–∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ, –∞—Ö–∞—Ö–∞—Ö–∞])
        doc = requests.get(
            'https://api.telegram.org/file/bot{0}/{1}'.format(my_token, path))
        with open(fname, 'wb') as f:
            # –≤–æ—Ç –∏–º–µ–Ω–Ω–æ —Ç—É—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Å–∞–º–∞ –∞—É–¥–∏–æ-–º–µ—Å—Å–∞–≥–∞
            f.write(doc.content)
        # –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä–∞—à–Ω–æ–µ –ü–û ffmpeg, –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ .oga –≤ .wav
        output = subprocess.call(['ffmpeg', '-i', fname,
                                  'output.wav'])
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
        result = audio_to_text('output.wav')

        try:
            message_text = result.lower()

            for i in date_combinations.keys():
                if message_text.find(i) != -1:
                    print(i)
                    message_text = message_text.replace(
                        i, date_combinations[i])
                    break

            day_number = datetime.now().strftime('%d')
            month_number = datetime.now().strftime('%m')
            hour_number = datetime.now().strftime('%H')
            minute_number = datetime.now().strftime('%M')
            year_number = datetime.now().strftime('%Y')

            user_id = message.from_user.id
            event_id = 0
            event_name = ''
            event_datetime = ''

            is_month_exist = False

            for month in MONTHS.keys():
                if re.findall(r'\d+'+f' {month}', message_text):
                    temp_daymonth = re.findall(
                        r'\d+'+f' {month}', message_text)[0].split(' ')
                    day_number = temp_daymonth[0]
                    event_name = message_text.replace(re.findall(
                        r'\d+'+f' {month}', message_text)[0], '').strip()
                    month_number = MONTHS[month]
                    try:
                        valid_date = time.strptime(
                            f'{month_number}/{day_number}', '%m/%d')
                        is_month_exist = True
                    except ValueError:
                        print('Invalid date!')
                        await bot.send_message(message.from_user.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')
                        return Error
                    break

            first_date_time = re.findall(r'\d\d\:\d\d', message_text)
            second_date_time = re.findall(r'\d\:\d\d', message_text)
            third_date_time = re.findall(r'—á–µ—Ä–µ–∑ \d+ —á–∞\w+', message_text)
            fourth_date_time = re.findall(r'—á–µ—Ä–µ–∑ \d+ –º–∏–Ω—É\w+', message_text)
            fifth_date_time = re.findall(
                r'—á–µ—Ä–µ–∑ \d+ —á–∞\w+ –∏ \d+ –º–∏–Ω—É\w+', message_text)
            six_date_time = re.findall(
                r'—á–µ—Ä–µ–∑ \d+ —á–∞\w+ \d+ –º–∏–Ω—É\w+', message_text)
            if first_date_time or second_date_time or third_date_time or fourth_date_time or fifth_date_time or six_date_time or is_month_exist:
                await message.reply('–ï—Å—Ç—å –≤—Ä–µ–º—è')
                if first_date_time:
                    temp_time = first_date_time[0].split(':')
                    hour_number = temp_time[0]
                    minute_number = temp_time[1]
                    event_name = message_text.replace(first_date_time[0], '').strip().strip(
                        '–≤').strip('–∫').strip('—Å').strip()
                    print(message_text)

                if second_date_time and not first_date_time:
                    temp_time = second_date_time[0].split(':')
                    hour_number = temp_time[0]
                    minute_number = temp_time[1]
                    event_name = message_text.replace(second_date_time[0], '').strip().strip(
                        '–≤').strip('–∫').strip('—Å').strip()

                if third_date_time and not (fifth_date_time or six_date_time):
                    temp_time = third_date_time[0].split(' ')
                    day_number = str(int(day_number) +
                                     (int(hour_number) + int(temp_time[1]))//24)
                    hour_number = str(int(hour_number) +
                                      int(temp_time[1]) % 24)
                    event_name = message_text.replace(third_date_time[0], '').strip().strip(
                        '–≤').strip('–∫').strip('—Å').strip()

                if fourth_date_time:
                    temp_time = fourth_date_time[0].split(' ')
                    hour_number = str(int(hour_number) + int(temp_time[1])//60)
                    minute_number = str(
                        int(minute_number) + int(temp_time[1]) % 60)
                    day_number = str(int(day_number) + int(hour_number)//24)
                    hour_number = str(int(hour_number) % 24)
                    event_name = message_text.replace(fourth_date_time[0], '').strip().strip(
                        '–≤').strip('–∫').strip('—Å').strip()

                if fifth_date_time or six_date_time:
                    if fifth_date_time:
                        temp_time = fifth_date_time[0].split(' ')
                        total_minutes = int(
                            temp_time[4]) + int(temp_time[1])*60
                        hour_number = str(
                            int(hour_number) + int(total_minutes)//60)
                        minute_number = str(int(minute_number) +
                                            int(total_minutes) % 60)
                        day_number = str(int(day_number) +
                                         int(hour_number)//24)
                        hour_number = str(int(hour_number) % 24)
                    else:
                        temp_time = six_date_time[0].split(' ')
                        total_minutes = int(
                            temp_time[3]) + int(temp_time[1])*60
                        hour_number = str(
                            int(hour_number) + int(total_minutes)//60)
                        minute_number = str(int(minute_number) +
                                            int(total_minutes) % 60)
                        day_number = str(int(day_number) +
                                         int(hour_number)//24)
                        hour_number = str(int(hour_number) % 24)

                if message_text.find('—á–µ—Ä–µ–∑ —á–∞—Å') != -1:
                    day_number = str(int(day_number) +
                                     (int(hour_number) + 1)//24)
                    hour_number = str(int(hour_number) + 1 % 24)
                event_datetime = f'{day_number}/{month_number}/{year_number} {hour_number}:{minute_number}'
                print(day_number, month_number,
                      hour_number, ':', minute_number)
                insertEventToSql(event_name, event_datetime, user_id)
                await task_notifications(event_name, message.from_user.id, (datetime.strptime(event_datetime, '%d/%m/%Y %H:%M') - datetime.strptime(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "%Y-%m-%d %H:%M:%S")).seconds)
            else:
                await bot.send_message(message.from_user.id, '–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ {str(e)}')
            os.remove('output.wav')
            os.remove(fname)
    except sr.UnknownValueError as e:
        # –û—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –æ—Ç—Å—ã–ª–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–Ω–æ—Å–∏–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ –æ—à–∏–±–æ–∫
        await bot.send_message(message.from_user.id,  "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ —è –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ...")
        with open(logfile, 'a', encoding='utf-8') as f:
            f.write(str(datetime.today().strftime("%H:%M:%S")) + ':' + str(message.from_user.id) + ':' + str(message.from_user.first_name) + '_' +
                    str(message.from_user.last_name) + ':' + str(message.from_user.username) + ':' + str(message.from_user.language_code) + ':Message is empty.\n')
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–Ω–æ—Å–∏—Ç—Å—è –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ –æ—à–∏–±–æ–∫
        await bot.send_message(message.from_user.id,  "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –ø–ª–æ—Ö–æ, –Ω–æ –Ω–∞—à–∏ —Å–º–µ–ª—ã–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã —É–∂–µ —Ç—Ä—É–¥—è—Ç—Å—è –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º... \n–î–∞ –ª–∞–¥–Ω–æ, –Ω–∏–∫—Ç–æ —ç—Ç—É –æ—à–∏–±–∫—É –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ –±—É–¥–µ—Ç, –æ–Ω–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è –≤ –ª–æ–≥–∞—Ö.")
        with open(logfile, 'a', encoding='utf-8') as f:
            f.write(str(datetime.today().strftime("%H:%M:%S")) + ':' + str(message.from_user.id) + ':' + str(message.from_user.first_name) + '_' +
                    str(message.from_user.last_name) + ':' + str(message.from_user.username) + ':' + str(message.from_user.language_code) + ':' + str(e) + '\n')
    finally:
        os.remove('output.wav')
        os.remove(fname)

date_combinations = {
    '–≤ 1:00 –Ω–æ—á–∏': '1:00',
    '–≤ 2:00 –Ω–æ—á–∏': '2:00',
    '–≤ 3:00 –Ω–æ—á–∏': '3:00',
    '–≤ 4:00 —É—Ç—Ä–∞': '4:00',
    '–≤ 4:00 –Ω–æ—á–∏': '4:00',
    '–≤ 5:00 —É—Ç—Ä–∞': '5:00',
    '–≤ 5:00 –Ω–æ—á–∏': '5:00',
    '–≤ 6:00 —É—Ç—Ä–∞': '6:00',
    '–≤ 7:00 —É—Ç—Ä–∞': '7:00',
    '–≤ 8:00 —É—Ç—Ä–∞': '8:00',
    '–≤ 9:00 —É—Ç—Ä–∞': '9:00',
    '–≤ 10:00 —É—Ç—Ä–∞': '10:00',
    '–≤ 11:00 —É—Ç—Ä–∞': '11:00',
    '–≤ 12:00 —É—Ç—Ä–∞': '12:00',
    '–≤ 1:00 –¥–Ω—è': '13:00',
    '–≤ 2:00 –¥–Ω—è': '14:00',
    '–≤ 3:00 –¥–Ω—è': '15:00',
    '–≤ 5:00 –≤–µ—á–µ—Ä–∞': '17:00',
    '–≤ 6:00 –≤–µ—á–µ—Ä–∞': '18:00',
    '–≤ 7:00 –≤–µ—á–µ—Ä–∞': '19:00',
    '–≤ 8:00 –≤–µ—á–µ—Ä–∞': '20:00',
    '–≤ 9:00 –≤–µ—á–µ—Ä–∞': '21:00',
    '–≤ 10:00 –≤–µ—á–µ—Ä–∞': '22:00',
    '–≤ 11:00 –≤–µ—á–µ—Ä–∞': '23:00',
    '–≤ 12:00 –Ω–æ—á–∏': '0:00'
}

MONTHS = {
    '—è–Ω–≤–∞—Ä—è': '01',
    '—Ñ–µ–≤—Ä–∞–ª—è': '02',
    '–º–∞—Ä—Ç–∞': '03',
    '–∞–ø—Ä–µ–ª—è': '04',
    '–º–∞—è': '05',
    '–∏—é–Ω—è': '06',
    '–∏—é–ª—è': '07',
    '–∞–≤–≥—É—Å—Ç–∞': '08',
    '—Å–µ–Ω—Ç—è–±—Ä—è': '09',
    '–æ–∫—Ç—è–±—Ä–∞': '10',
    '–Ω–æ—è–±—Ä—è': '11',
    '–¥–µ–∫–∞–±—Ä—è': '12'}


@dp.message_handler()
async def echo_send(message: types.Message):
    try:
        message_text = message.text.lower()

        for i in date_combinations.keys():
            if message_text.find(i) != -1:
                print(i)
                message_text = message_text.replace(i, date_combinations[i])
                break

        day_number = datetime.now().strftime('%d')
        month_number = datetime.now().strftime('%m')
        hour_number = datetime.now().strftime('%H')
        minute_number = datetime.now().strftime('%M')
        year_number = datetime.now().strftime('%Y')

        user_id = message.from_user.id
        event_id = 0
        event_name = ''
        event_datetime = ''

        is_month_exist = False

        for month in MONTHS.keys():
            if re.findall(r'\d+'+f' {month}', message_text):
                temp_daymonth = re.findall(
                    r'\d+'+f' {month}', message_text)[0].split(' ')
                day_number = temp_daymonth[0]
                event_name = message_text.replace(re.findall(
                    r'\d+'+f' {month}', message_text)[0], '').strip()
                month_number = MONTHS[month]
                try:
                    valid_date = time.strptime(
                        f'{month_number}/{day_number}', '%m/%d')
                    is_month_exist = True
                except ValueError:
                    print('Invalid date!')
                    await bot.send_message(message.from_user.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')
                    return Error
                break

        first_date_time = re.findall(r'\d\d\:\d\d', message_text)
        second_date_time = re.findall(r'\d\:\d\d', message_text)
        third_date_time = re.findall(r'—á–µ—Ä–µ–∑ \d+ —á–∞\w+', message_text)
        fourth_date_time = re.findall(r'—á–µ—Ä–µ–∑ \d+ –º–∏–Ω—É\w+', message_text)
        fifth_date_time = re.findall(
            r'—á–µ—Ä–µ–∑ \d+ —á–∞\w+ –∏ \d+ –º–∏–Ω—É\w+', message_text)
        six_date_time = re.findall(
            r'—á–µ—Ä–µ–∑ \d+ —á–∞\w+ \d+ –º–∏–Ω—É\w+', message_text)
        if first_date_time or second_date_time or third_date_time or fourth_date_time or fifth_date_time or six_date_time or is_month_exist:
            await message.reply('–ï—Å—Ç—å –≤—Ä–µ–º—è')
            if first_date_time:
                temp_time = first_date_time[0].split(':')
                hour_number = temp_time[0]
                minute_number = temp_time[1]
                event_name = message_text.replace(first_date_time[0], '').strip().strip(
                    '–≤').strip('–∫').strip('—Å').strip()
                print(message_text)

            if second_date_time and not first_date_time:
                temp_time = second_date_time[0].split(':')
                hour_number = temp_time[0]
                minute_number = temp_time[1]
                event_name = message_text.replace(second_date_time[0], '').strip().strip(
                    '–≤').strip('–∫').strip('—Å').strip()

            if third_date_time and not (fifth_date_time or six_date_time):
                temp_time = third_date_time[0].split(' ')
                day_number = str(int(day_number) +
                                 (int(hour_number) + int(temp_time[1]))//24)
                hour_number = str(int(hour_number) + int(temp_time[1]) % 24)
                event_name = message_text.replace(third_date_time[0], '').strip().strip(
                    '–≤').strip('–∫').strip('—Å').strip()

            if fourth_date_time:
                temp_time = fourth_date_time[0].split(' ')
                hour_number = str(int(hour_number) + int(temp_time[1])//60)
                minute_number = str(int(minute_number) +
                                    int(temp_time[1]) % 60)
                day_number = str(int(day_number) + int(hour_number)//24)
                hour_number = str(int(hour_number) % 24)
                event_name = message_text.replace(fourth_date_time[0], '').strip().strip(
                    '–≤').strip('–∫').strip('—Å').strip()

            if fifth_date_time or six_date_time:
                if fifth_date_time:
                    temp_time = fifth_date_time[0].split(' ')
                    total_minutes = int(temp_time[4]) + int(temp_time[1])*60
                    hour_number = str(int(hour_number) +
                                      int(total_minutes)//60)
                    minute_number = str(int(minute_number) +
                                        int(total_minutes) % 60)
                    day_number = str(int(day_number) + int(hour_number)//24)
                    hour_number = str(int(hour_number) % 24)
                else:
                    temp_time = six_date_time[0].split(' ')
                    total_minutes = int(temp_time[3]) + int(temp_time[1])*60
                    hour_number = str(int(hour_number) +
                                      int(total_minutes)//60)
                    minute_number = str(int(minute_number) +
                                        int(total_minutes) % 60)
                    day_number = str(int(day_number) + int(hour_number)//24)
                    hour_number = str(int(hour_number) % 24)

            if message_text.find('—á–µ—Ä–µ–∑ —á–∞—Å') != -1:
                day_number = str(int(day_number) + (int(hour_number) + 1)//24)
                hour_number = str(int(hour_number) + 1 % 24)
            event_datetime = f'{day_number}/{month_number}/{year_number} {hour_number}:{minute_number}'
            print(day_number, month_number, hour_number, ':', minute_number)
            insertEventToSql(event_name, event_datetime, user_id)
            await task_notifications(event_name, message.from_user.id, (datetime.strptime(event_datetime, '%d/%m/%Y %H:%M') - datetime.strptime(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "%Y-%m-%d %H:%M:%S")).seconds)
        else:
            await bot.send_message(message.from_user.id, '–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ {str(e)}')


async def task_notifications(message: str = '', user_id: int = 0, sleep_time: int = 0):
    if sleep_time - 3600 >= 0:
        sl = sleep_time - 3600
        await asyncio.sleep(sl)
        await bot.send_message(user_id, f'–ß–µ—Ä–µ–∑ —á–∞—Å —É –≤–∞—Å –∑–∞–¥–∞—á–∞ - "{message}"')
    await asyncio.sleep(sleep_time)
    await bot.send_message(user_id, f'–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - "{message}"')
    await bot.send_message(user_id, f'–£–¥–∞–ª–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ - "{message}"')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
